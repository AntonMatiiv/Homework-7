class Dna:
    def __init__(self, sequence):
        self.sequence = sequence
        self.sequence_length = len(sequence)

    def gc(self):
        gc_counter = 0
        for i in range(self.sequence_length):
            if (self.sequence[i] == 'G') or (self.sequence[i] == 'C'):
                 gc_counter += 1
        gc_content = round(float((gc_counter / self.sequence_length) * 100), 1)
        return gc_content

    def reverse_complement(self):
        dna_reverse_complement_dict = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
        return ''.join([dna_reverse_complement_dict[base] for base in self.sequence[::-1]])

    def transcribe(self):
        rna_transcript = self.sequence.replace('T', 'U')
        return rna_transcript

class Rna:
    def __init__(self, sequence):
        self.sequence = sequence
        self.sequence_length = len(sequence)

    def gc(self):
        gc_counter = 0
        for i in range(self.sequence_length):
            if (self.sequence[i] == 'G') or (self.sequence[i] == 'C'):
                gc_counter += 1
        gc_content = round(float((gc_counter / self.sequence_length) * 100), 1)
        return gc_content

    def reverse_complement(self):
        rna_reverse_complement_dict = {'A': 'U', 'C': 'G', 'G': 'C', 'U': 'A'}
        return ''.join([rna_reverse_complement_dict[base] for base in self.sequence[::-1]])

